#;;; -*- Encoding: utf-8 -*-

set char-encoding UTF-8

clear stack

define TB "\n" ;

# […], (…), {…}, ‹…› occur inside words
define rightPunct	[ "," | "?" | "!" | ";" | "%" 
       			| "»" # | "›"
			| "“" | "‘" # these two seem to be wrong 
			| "”" | "’"
			| "*" | {"}] ;

define rightPunctNoQuote [ "," | "?" | "!" | ";" | "%" 
       			 | "»" # | "›"
			 | "*" | {"}] ;

# comma can occur inside words
define rightPunctFacs	[ "…" | "?" | "!" | ":" | ";" | "%" 
       			| "»" # | "›"
			| "“" | "‘" # these are wrong 
			| "”" | "’"
			| "*" | {"}] ;

# used to keep '“-' together (e.g., „xyz”-ს)
define rightQuote	[ "»" | "“" | "‘" | "”" | "’" ] ;

define leftPunct	[ "«" # | "‹"
       			| "„" | "‚" | "*" | {"}
			| "…"
			] ;

define Abbrev	 	[ @txt "ng-abbrev-dot.txt"
       			# remove trailing dot
			.o. [ "." -> 0 || _ .#. ] ].l ;

define Digit [1|2|3|4|5|6|7|8|9|"0"] ;

define WS [ " " | TB | .#. | NEWLINE ] ;

read regex  [ TB "@@@" TB <- NEWLINE ]
	    .o.
	    [ "(" <- "(" TB || _ \TB* ")" ]
	    .o.
	    [ ")" <- TB ")" || "(" \TB* _ ]
	    .o.
	    [ "(" TB <- "(" || [ TB | .#. ] _ ]
	    .o.
	    [ TB ")" <- ")" || _ [ TB | .#. ] ]
	    #
	    .o.
	    [ "[" <- "[" TB || _ \TB* "]" ]
	    .o.
	    [ "]" <- TB "]" || "[" \TB* _ ]
	    .o.
	    [ "[" TB <- "[" || [ TB | .#. ] _ ]
	    .o.
	    [ TB "]" <- "]" || _ [ TB | .#. ] ]
	    #
	    .o.
	    [ "{" <- "{" TB || _ \TB* "}" ]
	    .o.
	    [ "}" <- TB "}" || "{" \TB* _ ]
	    .o.
	    [ "{" TB <- "{" || [ TB | .#. ] _ ]
	    .o.
	    [ TB "}" <- "}" || _ [ TB | .#. ] ]
	    #
	    .o.
	    [ "‹" <- "‹" TB || _ \TB* "›" ]
	    .o.
	    [ "›" <- TB "›" || "‹" \TB* _ ]
	    .o.
	    [ "‹" TB <- "‹" || [ TB | .#. ] _ ]
	    .o.
	    [ TB "›" <- "›" || _ [ TB | .#. ] ]
	    # 
	    .o. # keep whitespace
	    [ TB " " TB <- " "]
	    .o.
	    [ TB "	" TB <- "	"]
	    .o.
	    [ leftPunct -> ... TB ].i
	    .o.
	    # other abbrevs
	    [ 0 <- TB || [ " " | "(" | leftPunct | .#. ] Abbrev _ "." ]
	    .o.
	    # მან.
	    [ 0 <- TB || ["0"|1|2|3|4|5|6|7|8|9]  " "  {მან} _ "." ]
	    .o.
	    # one-character abbrevs
	    [ TB "." <- "." || [ [ \[ " " | .#. ] ? ] | ")" | rightPunct | ":" | "…" ] _ [ " " | ")" | .#. | TB ] ]
	    .o.
	    [ 0 <- TB || Digit _ "," Digit ]
	    .o.
	    [ rightQuote -> TB ... || _ [ \"-" | .#. ] ].i
	    .o.
	    [ rightPunctNoQuote -> TB ... ].i
	    .o.
	    [ TB ":" <- ":" || _ WS ]
	    .o.
	    [ "." TB <- "." || WS _ \Digit ]
	    .o.
	    [ TB … <- … || _ [ rightPunct | ":" | " " | ")" | .#. ] ]
	    # .o.
	    # [ {...} -> TB "…" ].i # very inefficient on many dots
	    .o.
	    [ {...} @-> TB "…" ].i
	    .o.
	    [ "!" "…" <- {!..} || _ WS ]
	    .o.
	    [ 0 <- " " \\ Digit _ Digit Digit Digit ]
	    .o. # 3,1415
	    [ "," TB <- "," || \[Digit|.#.] _ \[Digit|TB|.#.] ]
	    .o.
	    [ TB "/" TB <- "/" || _ \[TB|.#.] ]
	    .o.
	    [ TB "(!)" TB  <- {(!)}, TB "[!]" TB  <- {[!]} , TB "{!}" TB  <- "{" "!" "}" ]
	    .o. # 2014
	    [ TB NEWLINE <- TB]
	    ;

# NG version, outer brackets are split off

save stack georgian-tokenize-ng.fst

# new version 2014
read regex  [ TB "@@@" TB <- NEWLINE ]
	    .o.
	    [ ":" <- TB ":" || ":" \TB* _ ] # :ვ:
	    .o. # … but only if not part of word-internal parenthesis
	    [ "(" <- "(" TB || _ \TB* ")" ]
	    .o.
	    [ ")" <- TB ")" || "(" \TB* _ ]
	    .o. # split off parens …
	    [ "(" TB <- "(" || WS ("/") _ ]
	    .o.
	    [ TB ")" <- ")" || _ WS ]
	    .o. # keep whitespace
	    [ TB " " TB <- " "]
	    .o.
	    [ TB "	" TB <- "	"]
	    .o.
	    [ "”" TB <- "”" || _ "-" ] # e.g., …”-ო
	    .o.
	    [ leftPunct -> ... TB ].i
	    .o.
	    # other abbrevs
	    [ 0 <- TB || [ " " | .#. ] Abbrev _ "." ]
	    .o.
	    # one-character abbrevs
	    [ TB "." <- "." || [ [ \[ " " | .#. ] ? ] | ")" | rightPunct | ":" | "…" ] _ [ " " | ")" | .#. | TB ] ]
	    .o.
	    [ TB ":" <- ":" || _ WS ]
	    .o.
	    [ rightPunct -> TB ... || \[ "[" | "{" | "(" | "‹" ] _ ].i
	    .o.
	    [ TB … <- … || \[ "[" | "{" | "(" | "‹" ] _ [ rightPunct | ":" | " " | ")" | .#. ] ]
	    .o.
	    [ {...} @-> "…" ].i
	    .o.
	    [ "," TB <- "," || _ \[TB|.#.] ]
	    .o.
	    [ TB "(!)" TB  <- {(!)}, TB "[!]" TB  <- {[!]} , TB "{!}" TB  <- "{" "!" "}" ]
	    .o. # 2014
	    [ TB NEWLINE <- TB ]
	    ;

save stack geo-tokenize.fst

read regex  [ "(" <- "(" TB || _ \TB* ")" ]
	    .o.
	    [ ")" <- TB ")" || "(" \TB* _ ]
	    .o.
	    [ "(" TB <- "(" || WS _ ]
	    .o.
	    [ TB ")" <- ")" || _ WS ]
	    #
	    .o.
	    [ "[" <- "[" TB || _ \TB* "]" ]
	    .o.
	    [ "]" <- TB "]" || "[" \TB* _ ]
	    .o.
	    [ "[" TB <- "[" || WS _ ]
	    .o.
	    [ TB "]" <- "]" || _ WS ]
	    #
	    .o.
	    [ "{" <- "{" TB || _ \TB* "}" ]
	    .o.
	    [ "}" <- TB "}" || "{" \TB* _ ]
	    .o.
	    [ "{" TB <- "{" || WS _ ]
	    .o.
	    [ TB "}" <- "}" || _ WS ]
	    #
	    .o.
	    [ "‹" <- "‹" TB || _ \TB* "›" ]
	    .o.
	    [ "›" <- TB "›" || "‹" \TB* _ ]
	    .o.
	    [ "‹" TB <- "‹" || WS _ ]
	    .o.
	    [ TB "›" <- "›" || _ WS ]
	    #
	    .o.
	    [ TB <- " "]
	    .o.
	    [ leftPunct -> ... TB ].i
	    .o.
	    [ TB "." <- "." || \[ " " | .#. ] ? _ [ " " | .#. | TB ] ]
	    .o.
	    [ TB "," <- "," || _ [ TB | .#. | " " | "." | rightPunctFacs ] ]
	    .o.
	    [ rightPunctFacs -> TB ... ].i
	    #.o.
	    #[ {...} @-> TB "…" ].i
	    #.o. # in manuscripts, comma can occur inside words
	    #[ "," TB <- "," || _ \[TB|.#.] ]
	    .o.
	    [ TB "(!)" TB  <- {(!)}, TB "[!]" TB  <- {[!]} , TB "{!}" TB  <- "{" "!" "}" ]
	    ;

save stack geo-facs-tokenize.fst
