set flag-is-epsilon ON

define verbPart 0;

if verbPart & 100 ;

   load stack verb.fst
   define Verb

else
   
load stack verb0.fst
define Verb0
load stack verb1.fst
define Verb1
load stack verb2.fst
define Verb2
load stack verb3.fst
define Verb3
load stack verb4.fst
define Verb4
load stack verb5.fst
define Verb5
load stack verb6.fst
define Verb6
load stack verb7.fst
define Verb7

define Verb  [ Verb0 | Verb1 | Verb2 | Verb3 | Verb4 | Verb5 | Verb6 | Verb7 ] ;

load stack noun.fst
define Noun

load defined phonotactics.vars

echo phonotactics loaded

load defined numbers.vars

echo numbers loaded

# defines OGAdv, NGAdv
source oge-adv.regex
source ng-adv.regex
source extracted-adv.regex
# disabled
source extracted-interj.regex

# TODO: add enclitics
define NGAdvAT [ NGAdv .o. [ ?* {ად} ] .o. [ {დ} -> {თ} || _ .#. ] ] "+Dialect":0 ;
define NGAdv NGAdv # | NGExtractedAdv
       | NGAdvAT ;

define NGAdvVowel NGAdv .o. [?* Vowel ] ;
define NGAdvCons NGAdv .o. [?* \Vowel ] ;

define NGAdvVowelEnclitics [ "+Encl:ც":{ც} "+Foc":0 ("+Encl:Aux":{აა})
       			   | "+Encl:ღა":{ღა} "+Foc":0 ("+Encl:Aux":{ა})
			   | "+Encl:ვე":{ვე} "+Foc":0 ("+Encl:Aux":{ა})
			   | "+Encl:Aux":{ა}
			   ] ;
define NGAdvConsEnclitics  [ "+Encl:ც":{აც} "+Foc":0 ("+Encl:Aux":{აა})
       			   | "+Encl:ღა":{ღა} "+Foc":0 ("+Encl:Aux":{ა})
			   | "+Encl:ვე":{ვე} "+Foc":0 ("+Encl:Aux":{ა}) # remove those from ng-adv.regex
			   | "+L":{ა} # those too
			   | "+Encl:Aux":{აა}
			   ] ;

define Hyphen "-"|"–"|"—" ;

# todo: ორი-ორი Dist (NumType=Dist)
# todo: refine: -ხელ
define alphJer [ [ card000001x999999alph [{ჯერ}|{ჯელ}] "+Adv":0 "+Num":0 "+Repet":0
       	         | card000001x999999alph stemOde [{ჯერ}|{ჯელ}] "+Adv":0  "+Num":0 "+Approx":0 "+Repet":0
       	         | [ card000001x999999alph ([{ჯერ}|{ჯელ}]) | {ერთხელ} ] "-":Hyphen
	           card000001x999999alph [{ჯერ}|{ჯელ}] "+Adv":0 "+Num":0 "+Repet":0 "+Range":0 ] 
	         | {ერთხელ} "+Adv":0 "+Num":0 "+Repet":0 ]	       
		 ;

define NGAdv   NGAdvVowel ( NGAdvVowelEnclitics ) # add this when L forms are analyzed as such
       	     | [ alphJer | NGAdvCons ] ( NGAdvConsEnclitics ) ;

endif

define altPvUp       [ {აღ}  <- {ა}  || .#. _ ]
		 .o. [ {შთა} <- {ჩა} || .#. _ ]
		 .o. [ {გან} <- {გა} || .#. _ "·" ] # without "·" bug: განრდა
		 .o. [ {გარდამო} <- {გადმო} || .#. _ ]
		 .o. [ {გარდა} <- {გადა} || .#. _ ]
		 .o. [ {წარ} <- {წა} || .#. _ ]
		 ;

define altPvUp1      [ {გად} <- {გადა} || .#. _ ]
		 .o. [ {გარდმო} <- {გადმო} || .#. _ ]
		     ;
define altPvUp2      [ {გარდ} <- {გადა} || .#. _ ] ;

define altPvDown     [ {წა} -> {წარ} || .#. _  ]
		 .o. [ {გადა} -> {გარდა} || .#. _  ]
		 .o. [ {გადმო} -> {გარდამო} || .#. _  ]
		 .o. [ {გა} -> {გან} || .#. _ "#" ] # without "#" bug: განრდა
		 .o. [ {ჩა} -> {შთა} || .#. _  ]
		 .o. [ {ა}  -> {აღ}  || .#. _  ]
		 ;

define altPvDown1    [ {გადა} -> {გად} || .#. _  ]
		 .o. [ {გადმო} -> {გარდმო} || .#. _  ] ;

define altPvDown2    [ {გადა} -> {გარდ} || .#. _  ] ;

define VerbPv 	 [ [ [ [ა|{ჩა}|{წა}] ({მო})] | {გა} | {გადა} | {გადმო} ] "·" ?* ]
       		 .o.
		 Verb
		 .o.
		 [ [ [ [ა|{ჩა}|{წა}] ({მო})] | {გა} | {გადა} | {გადმო} ] "#" ?* ] ;

define VerbPv1 	 [ [{გადა}|{გადმო}] "·" ?* ]
       		 .o.
		 Verb
		 .o.
		 [ [{გადა}|{გადმო}] "#" ?* ] ;

define VerbPv2 	 [ {გადა} "·" ?* ]
       		 .o.
		 Verb
		 .o.
		 [ {გადა} "#" ?* ] ;

define Verb	   Verb 
       		 | [ altPvUp .o. VerbPv .o. altPvDown ]
       		 | [ altPvUp1 .o. VerbPv1 .o. altPvDown1 ]
       		 | [ altPvUp2 .o. VerbPv2 .o. altPvDown2 ] ;

define NounPv 	 [ [ [ [ა|{ჩა}|{წა}] ({მო})] | {გა} | {გადა} | {გადმო} ] "·" ?* ]
       		 .o.
		 Noun
		 .o.
		 [ [ [ [ა|{ჩა}|{წა}] ({მო})] | {გა} | {გადა} | {გადმო} ] "#" ?* ] ;

define NounPv1 	 [ [{გადა}|{გადმო}] "·" ?* ]
       		 .o.
		 Noun
		 .o.
		 [ [{გადა}|{გადმო}] "#" ?* ] ;

define NounPv2 	 [ {გადა} "·" ?* ]
       		 .o.
		 Noun
		 .o.
		 [ {გადა} "#" ?* ] ;

define Noun	   [ [ "+Pron" <- "+A" || {ყველაფ[ე]რ-ი} _ ] .o. Noun ] # alternatively, add Pron to database
       		 | [ altPvUp .o. NounPv .o. altPvDown ]
       		 | [ altPvUp1 .o. NounPv1 .o. altPvDown1 ]
       		 | [ altPvUp2 .o. NounPv2 .o. altPvDown2 ] ;

read regex Noun ;
echo > eliminate flag Pp
eliminate flag Pp
define NounNoFlags

define trans  	 "+Trans" | "+Act" ;
define unerg  	 "+Unerg" | "+MedAct" ;
define unacc  	 "+Unacc" | "+Pass" | "+MedPass" | "+PassState" ;

define PvVersion ("+Pv") ( "+SV" | "+OV" | "+LV" ) ;

define 3rdSeriesTense [ "+Perf" | "+PluPerf" | "+ConjPerf" | "+IterPerf" | "+Conj-III" | "+Iter-III" ] ;
define 3rdSeries [ "+Perf" | "+PluPerf" | "+ConjPerf" | "+IterPerf" | "+IterPerf1" ] PvVersion ;
define 3rdSeriesInverted [ trans | unerg | "+Caus" ] PvVersion ;

define 1stSeries [ "+Pres" | "+Impf" |"+ConjPres" | "+Fut" | "+Cond" | "+ConjFut" | "+Conj"
		 | "+IterPres" | "+IterImpf" | "+ImpvPres" ] PvVersion ;

define 2ndSeriesPlain [ "+Aor" | "+Opt" | "+IterAor" | "+ImpvAor" ] ;

define 2ndSeries 2ndSeriesPlain ( "+Imperfective" ) PvVersion ;

define 12Series 1stSeries | 2ndSeries ;

## see phonotactics.regex
# transitive
# define S=DO3=OBen
# define S=DO3=OLoc
# define S=DO3=OTh
# intransitive
# define S= 
# define S=OBen
# define S=OLoc
# define S=OTh
# define S=OGen
#
# define Empty

# GNC only

define simplifyFrame [ 0 <- "%" ] # get rid of special marker
       		     .o.
		     [ "+<S>" ... <- "+<AuxIntr>" ] 
       		     .o.
		     [ "+<S-DO>" ... <- [ "+<AuxTrans>" | "+<AuxTransHum>" ] ] 
		     .o. # OV in brackets when not marking IO
       		     [ "+[OV]" <- "+OV" || .#. \"+Inv"* _ [ "+<S>" | "+<S-DO>" ] ]
		     .o.
		     [ 0 <- "+OV", 0 <- "+SV", 0 <- "+LV",
		       "+<S-DO>" <- "+<S-DO-IO>", "+<S>" <- "+<S-IO>"
		      || [ trans | unerg | "+Caus" ] 3rdSeriesTense ?* _ ] 
       		     .o.
		     [ 0 <- "+Coll" ]
		     .o.
		     [ "+S:1" "+DO:3" <- "+DO:3" "+S:1" ]
       		     .o.
		     [ "+S:1Sg" "+DO:3" <- "+DO:3" "+S:1Sg" ]
       		     .o.
		     [ "+S:1Pl" "+DO:3" <- "+DO:3" "+S:1Pl" ]
       		     .o.
		     [ "+S:1" "+DO:3Sg" <- "+DO:3Sg" "+S:1" ]
       		     .o.
		     [ "+S:1Sg" "+DO:3Sg" <- "+DO:3Sg" "+S:1Sg" ]
       		     .o.
		     [ "+S:2" "+DO:3" <- "+DO:3" "+S:2" ]
       		     .o.
		     [ "+S:2Sg" "+DO:3" <- "+DO:3" "+S:2Sg" ]
       		     .o.
		     [ "+S:2Pl" "+DO:3" <- "+DO:3" "+S:2PL" ]
       		     .o.
		     [ "+S:2" "+DO:3Sg" <- "+DO:3Sg" "+S:2" ]
       		     .o.
		     [ "+S:2Sg" "+DO:3Sg" <- "+DO:3Sg" "+S:2Sg" ]
       		     .o.
		     [ "+S:3" "+DO:3Sg" <- "+DO:3Sg" "+S:3" ]
       		     .o.
		     [ "+S:3" "+DO:3" <- "+DO:3" "+S:3" ]
       		     .o.
		     [ "+S:3Sg" "+DO:3" <- "+DO:3" "+S:3Sg" ]
       		     .o.
		     [ "+S:3Pl" "+DO:3" <- "+DO:3" "+S:3Pl" ]
		     .o.
		     [ "+S:1Sg" (<-) "+S:1" "+[Excl]" ]
       		     .o.
		     [ "+DO:1Sg" (<-) "+DO:1" "+[Excl]" ]
       		     .o.
		     [ "+IO:1Sg" (<-) "+IO:1" "+[Excl]" ]
       		     .o.
		     [ "+S:2Sg" (<-) "+S:2" ]
       		     .o.
		     [ "+DO:2Sg" (<-) "+DO:2" ]
       		     .o.
		     [ "+IO:2Sg" (<-) "+IO:2" ]
		     .o.
		     [ "+S:1Sg" <- "+Subj1Sg" ]
       		     .o.
		     [ "+S:2Sg" <- "+Subj2Sg" ]
       		     .o.
		     [ "+S:3Sg" <- "+Subj3Sg" ]
       		     .o.
		     [ "+S:1Pl" <- "+Subj1Pl" ]
       		     .o.
		     [ "+S:2Pl" <- "+Subj2Pl" ]
       		     .o.
		     [ "+S:3Pl" <- "+Subj3Pl" ]
       		     .o.
		     [ "+S:1" <- "+Subj1" ]
       		     .o.
		     [ "+S:2" <- "+Subj2" ]
       		     .o.
		     [ "+S:3" <- "+Subj3" ]
		     .o.
		     [ "+DO:1Sg" <- "+Obj1Sg" ]
       		     .o.
		     [ "+DO:2Sg" <- "+Obj2Sg" ]
       		     .o.
		     [ "+DO:3Sg" <- "+Obj3Sg" ]
       		     .o.
		     [ "+DO:1Pl" <- "+Obj1Pl" ]
       		     .o.
		     [ "+DO:2Pl" <- "+Obj2Pl" ]
       		     .o.
		     [ "+DO:3Pl" <- "+Obj3Pl" ]
       		     .o.
		     [ "+DO:1" <- "+Obj1" ]
       		     .o.
		     [ "+DO:2" <- "+Obj2" ]
       		     .o.
		     [ "+DO:3" <- "+Obj3" ]
		     .o.
		     [ "+IO:1Sg" <- [ "+ObjTh1Sg" | "+ObjBen1Sg" | "+ObjLoc1Sg" ] ]
		     .o.
		     [ "+IO:2Sg" <- [ "+ObjTh2Sg" | "+ObjBen2Sg" | "+ObjLoc2Sg" ] ]
		     .o.
		     [ "+IO:3Sg" <- [ "+ObjTh3Sg" | "+ObjBen3Sg" | "+ObjLoc3Sg" ] ]
		     .o.
		     [ "+IO:1Pl" <- [ "+ObjTh1Pl" | "+ObjBen1Pl" | "+ObjLoc1Pl" ] ]
		     .o.
		     [ "+IO:2Pl" <- [ "+ObjTh2Pl" | "+ObjBen2Pl" | "+ObjLoc2Pl" ] ]
		     .o.
		     [ "+IO:3Pl" <- [ "+ObjTh3Pl" | "+ObjBen3Pl" | "+ObjLoc3Pl" ] ]
		     .o.
		     [ "+IO:1" <- [ "+ObjTh1" | "+ObjBen1" | "+ObjLoc1" ] ]
		     .o.
		     [ "+IO:2" <- [ "+ObjTh2" | "+ObjBen2" | "+ObjLoc2" ] ]
		     .o.
		     [ "+IO:3" <- [ "+ObjTh3" | "+ObjBen3" | "+ObjLoc3" ] ]
		     .o.
		     [ "+<IO:Dat>" <- [ "+<DatObjBen>" | "+<DatObjLoc>" | "+<DatObjTh>" ] ]
       	     	     .o.
		     [ "+<DO:Dat>" <- "+<DatObj>" ]
		     .o.
		     [ "+<S:Dat>" <- "+<DatSubj>" ]
		     .o.
		     [ "+<S:Erg>" <- "+<ErgSubj>" ]
		     .o.
		     [ "+<IO:Gen>" <- "+<GenObj>" ]
		     .o.
		     [ "+<DO:Nom>" <- "+<NomObj>" ]
		     .o.
		     [ "+<S:Nom>" <- "+<NomSubj>" ]
		     .o.
       		     [ 0 <- [ "+<OblBen>" | "+<OblLoc>" | "+<OblTh>" ] ] # was: "+<Obl>" <-
		     .o.
		     [ "+<S-DO-IO>" <- "+<S-DO-OTh>" ]
		     .o.
		     [ "+<S-DO>" <- "+<S-DO-Pred>" ]
		     # .o.
		     # [ "+<S-DO-Pred>" <- "+<S-DO-Pred>" ]
		     .o.
		     [ # "+SV"
		      "+<S-DO>" <- "+<S-DO-R>" ]
		     .o.
		     [ # "+OV"
		      "+<S-DO-IO>" <- ["+<S-DO3-OBen>"|"+<S-DO3-OBen-Pred>"|"+<S-DO3-OBen-Padv>"] ]
		     .o.
		     [ # "+LV"
		      "+<S-DO-IO>" <- "+<S-DO3-OLoc>" ]
		     .o.
		     [ "+<S-DO-IO>" <- "+<S-DO3-OTh>" ]
		     .o.
		     [ "+<S-DO>" <- "+<S-DO>" ]
		     .o.
		     [ # "+OV"
		       "+<S-IO>" <- "+<S-OBen>" ]
		     .o.
		     [ "+<S-IO>" <- "+<S-OGen>" ]
		     .o.
		     [ # "+LV"
		      "+<S-IO>" <- "+<S-OLoc>" ]
		     .o.
		     [ "+<S-IO>" <-  "+<S-OTh>" ]
		     .o.
		     [ "+<S>" <-  "+<S-[OTh]>" ]
		     .o. # remove <S-Obl…> altogether
		     [ "+<S>" <-  "+<S-Obl>" ]
		     .o.
		     [ "+<S-Obl>" <- "+<S-Obl_adv>" ]
		     .o.
		     [ "+<S-Obl>" <- "+<S-Obl_inst>" ]
		     .o.
       		     [ "+<S-Obl>" <- "+<S-Obl_ze>" ]
		     .o.
		     [ "+<S>" <- "+<S-Pnom>" ]
		     .o.
		     [ "+<S>" <- "+<S-Pred>" ]
		     #.o.
		     #[ "+<S-Pred>" <- "+<S-Pnom>" ]
		     #.o.
		     #[ "+<S-Pred>" <- "+<S-Pred>" ]
		     .o.
		     [ # "+SV" 
		     "+<S>" <- "+<S-R>" ]
     		     .o.
		     [ "+<S>" <- "+<S>" ]
		     ;

# GNC only, not LFG!
define Alternation [ "+<S>" <- "+<S-DO>",
       		     "+<S-R>" <- "+<S-DO-R>",
       		     "+<S-R>" <- "+<S-DO-R-Padv>",
       		     "+<S-R>" <- "+<S-DO-R-Pred>",
       		     "+<S-Pnom>" <- "+<S-DO-Pnom>",
       		     "+<S-Padv>" <- "+<S-DO-Padv>",
       		     "+<S-Pred>" <- "+<S-DO-Pred>",
       		     "+<S-Obl_ze>" <- "+<S-DO-Obl_ze>",
       		     "+<S-OBen>" <- "+<S-DO3-OBen>",
       		     "+<S-OBen>" <- "+<S-DO3-OBen-Padv>",
       		     "+<S-OBen>" <- "+<S-DO3-OBen-Pred>",
       		     "+<S-OLoc>" <- "+<S-DO3-OLoc>", 
       		     "+<S-OTh>"  <- "+<S-DO3-OTh>"
      		   || "+Passive" ?* _ ]
		  .o.
		  [ "+<S-DO-OTh>" <-
		    [ "+<S-DO-Padv>"
		    | "+<S-DO-Pred>"
		    | "+<S-DO-R>"
		    | "+<S-DO3-OBen>"
		    | "+<S-DO3-OLoc>"
		    | "+<S-DO3-OTh>"
		    | "+<S-DO>"	
		    | "+<S-OBen>"
		    | "+<S-OTh>"
		    | "+<S-R>"
		    | "+<S>" ]
		   || "+Causative" ?* _ ] ;

define ArgSyntax [ 0 <- [ "+Obj3" | "+Obj3Sg" | "+Obj3Pl" ] || S= ?* _ ]
       		 .o.
		 [ 0 <- "+Obj3" || "+Passive" ?* _ ] # new
		 .o.
		 [ "+Obj1SgSh" (<-) "+Obj1" || _ "+[Excl]" ] # ლელა
       		 .o. # OG
		 [ 0 <- "+DirObjSg", 0 <- "+DirObjPl" ]
		 .o. # OG: mark DirObj for Sg/Pl in 2nd Series
		 [ "+Obj3Pl" <- "+Obj3"
       	      	 || ["+Base" | "+Causative" ] 2ndSeries [ S=DO3=OTh | S=DO3=OLoc | S=DO3=OBen ] ?*
		    _ ? (?) "+DirObjPl" ]
		 .o. # OG
		 [ "+Obj3Sg" <- "+Obj3"
       	      	 || ["+Base" | "+Causative" ] 2ndSeries [ S=DO3=OTh | S=DO3=OLoc | S=DO3=OBen ] ?*
		    _ ? (?) "+DirObjSg" ]
		 .o. # OG
		 [ "+Obj3Sg"     <- "+Obj3",
		   "+Obj2SgSh"   <- "+Obj2",
		   "+Obj1SgSh"   <- "+Obj1" # obs: but not "+Obj1Pl": დაგვხატა DO:1
       	      	 || [[ trans | unerg ] "+Base" 2ndSeries ] S=DO ?* _ (?) "+DirObjSg" ]
		 .o.
		 [ "+Obj3Pl"     <- "+Obj3",
		   "+Obj2PlSh"   <- "+Obj2",
		   "+Obj1PlSh"   <- "+Obj1", # დამხატნა
       	      	   "+Obj1PlSh"   <- "+Obj1Pl" # დაგვხატნა
       	      	 || [[ trans | unerg ] "+Base" 2ndSeries ] S=DO ?* _ (?) "+DirObjPl" ]
		 .o.
		 [ "+Obj3" "+ObjBen1Sg" <- "+Obj1Sg",
       	      	   "+Obj3" "+ObjBen2Sg" <- "+Obj2Sg",
       	      	   "+Obj3" "+ObjBen1Pl" <- "+Obj1Pl",
       	      	   "+Obj3" "+ObjBen2Pl" <- "+Obj2Pl",
       	      	   "+Obj3" "+ObjBen1"   <- "+Obj1", # OG
       	      	   "+Obj3" "+ObjBen2"   <- "+Obj2", # OG
       	      	   "+Obj3" "+ObjBen3"   <- "+Obj3",
       	      	   "+Obj3" "+ObjBen3Pl" <- "+Obj3Pl" # new 25.12.2016
       	      	 || # trans # but: ვეუბნები, ვუთხარი: unacc, unerg # but: ამეშლები, ამშლია xxxxxx
       	      	    [ "+Base" 12Series | "+Passive" ?* ]  S=DO3=OBen ?* _ ] #
		 #.o. # neu 1. März 2015
		 #[ "+ObjBen1Sg" <- "+Obj1Sg",
       	      	 #  "+ObjBen2Sg" <- "+Obj2Sg",
       	      	 #  "+ObjBen1Pl" <- "+Obj1Pl",
       	      	 #  "+ObjBen2Pl" <- "+Obj2Pl",
       	      	 #  "+ObjBen1"   <- "+Obj1", # OG
       	      	 #  "+ObjBen2"   <- "+Obj2", # OG
       	      	 #  "+ObjBen3"   <- "+Obj3"
       	      	 #|| # trans # but: ამეშლები, ამშლია xxxxxx
       	      	 #   "+Passive" S=DO3=OBen ?* _ ]
		 .o.
		 [ "+Obj3" "+ObjLoc1Sg" <- "+Obj1Sg",
       	      	   "+Obj3" "+ObjLoc2Sg" <- "+Obj2Sg",
       	      	   "+Obj3" "+ObjLoc1Pl" <- "+Obj1Pl",
       	      	   "+Obj3" "+ObjLoc2Pl" <- "+Obj2Pl",
       	      	   "+Obj3" "+ObjLoc1"   <- "+Obj1", # OG
       	      	   "+Obj3" "+ObjLoc2"   <- "+Obj2", # OG
       	      	   "+Obj3" "+ObjLoc3"   <- "+Obj3",
       	      	   "+Obj3" "+ObjLoc3Pl" <- "+Obj3Pl" # new 25.12.2016
       	      	 || # trans
		    [ "+Base" | "+Passive" ] 12Series S=DO3=OLoc ?* _ ]
		 .o.
		 [ "+Obj3" "+ObjTh1Sg" <- "+Obj1Sg",
       	      	   "+Obj3" "+ObjTh2Sg" <- "+Obj2Sg",
       	      	   "+Obj3" "+ObjTh1Pl" <- "+Obj1Pl",
       	      	   "+Obj3" "+ObjTh2Pl" <- "+Obj2Pl",
       	      	   "+Obj3" "+ObjTh1"   <- "+Obj1", # OG
       	      	   "+Obj3" "+ObjTh2"   <- "+Obj2", # OG
       	      	   "+Obj3" "+ObjTh3"   <- "+Obj3",
       	      	   "+Obj3" "+ObjTh3Pl" <- "+Obj3Pl" # new 25.12.2016
       	      	 || # [trans|"+Caus"] 
		    ["+Base" | "+Passive" | "+Causative" ] 12Series S=DO3=OTh ?* _ ]
		 .o.
		 [ "+Obj3" "+ObjTh1Sg" <- "+Obj1Sg",
       	      	   "+Obj3" "+ObjTh2Sg" <- "+Obj2Sg",
       	      	   "+Obj3" "+ObjTh1Pl" <- "+Obj1Pl",
       	      	   "+Obj3" "+ObjTh2Pl" <- "+Obj2Pl",
       	      	   "+Obj3" "+ObjTh3"   <- "+Obj3"
       	      	 || "+Caus" "+Causative" 12Series S=DO ?* _ ]
		 .o.
		 [ "+ObjTh1Sg" <- "+Obj1Sg",
       	      	   "+ObjTh2Sg" <- "+Obj2Sg",
       	      	   "+ObjTh1Pl" <- "+Obj1Pl",
       	      	   "+ObjTh2Pl" <- "+Obj2Pl",
       	      	   "+ObjTh3Pl" <- "+Obj3Pl",
       	      	   "+ObjTh1"   <- "+Obj1", # OG
       	      	   "+ObjTh2"   <- "+Obj2", # OG
       	      	   "+ObjTh3"   <- "+Obj3"
       	      	 || [[trans|unerg] "+Base" 12Series | unacc ?* ] S=OTh ?* _ ]
		 .o.
		 [ "+ObjBen1Sg" <- "+Obj1Sg",
       	      	   "+ObjBen2Sg" <- "+Obj2Sg",
       	      	   "+ObjBen1Pl" <- "+Obj1Pl",
       	      	   "+ObjBen2Pl" <- "+Obj2Pl",
       	      	   "+ObjBen3Pl" <- "+Obj3Pl",
		   "+ObjBen1"   <- "+Obj1", # OG
       	      	   "+ObjBen2"   <- "+Obj2", # OG
       	      	   "+ObjBen3"   <- "+Obj3"
       	      	 || [[trans|unerg] "+Base" 12Series | unacc ?* ] S=OBen ?* _ ]
		 .o.
		 [ "+ObjLoc1Sg" <- "+Obj1Sg",
       	      	   "+ObjLoc2Sg" <- "+Obj2Sg",
       	      	   "+ObjLoc1Pl" <- "+Obj1Pl",
       	      	   "+ObjLoc2Pl" <- "+Obj2Pl",
       	      	   "+ObjLoc3Pl" <- "+Obj3Pl",
       	      	   "+ObjLoc1"   <- "+Obj1", # OG
       	      	   "+ObjLoc2"   <- "+Obj2", # OG
       	      	   "+ObjLoc3"   <- "+Obj3"
       	      	 || [[trans|unerg] "+Base" 12Series | unacc ?* ] S=OLoc ?* _ ]
		 .o.
		 [ 0 <- "+Obj3" || S= ?* _ ]
		 .o. # could simplify this and put it in above alternation
		 [ remove <- ["+Obj1Sg"|"+Obj2Sg"|"+Obj1Pl"|"+Obj2Pl"|"+Obj3Pl"|"+Obj1"|"+Obj2"]
		   || [ S= | "+Passive" ?* S=DO ] ?* _ ]
		 .o.
		 [ 0 <- "+Obj3" || unacc "+Passive" 3rdSeries S= ?* _ ]
		 .o.
		 [ 0 <- "+Obj3", 0 <- "+Subj3Sg" || Empty ?* _ ] ;


# remove forms that have a 1st/2nd person marker when only 3d person is allowed

define removeDisallowedForms [\ remove]*;

# common for NG and OG
define CaseSyntax   [ "+<NomSubj>" "+<DatObj>" <- "+CS" || [trans|unerg] "+Base" 1stSeries S=DO _ ] # Unerg: მიყიდია
       		  .o. [ "+<ErgSubj>" "+<NomObj>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries S=DO _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" <- "+CS" || [trans|unerg] "+Base" 3rdSeries S=DO _ ]

    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjBen>" <- "+CS" || [trans|unerg|unacc] # unacc for მეუბნება
		      		     		 		   	     "+Base" 1stSeries S=DO3=OBen _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjBen>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries S=DO3=OBen _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblBen>" <- "+CS" || [trans|unerg] "+Base" 3rdSeries    S=DO3=OBen _ ]
    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg|unacc] "+Base" 1stSeries S=DO3=OLoc _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries S=DO3=OLoc _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblLoc>" <- "+CS" || [trans|unerg] "+Base" 3rdSeries    S=DO3=OLoc _ ]
    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjTh>" <- "+CS" || [trans|unerg|"+Caus"] ["+Base"|"+Causative"] 1stSeries   S=DO3=OTh  _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjTh>" <- "+CS" || [trans|unerg|"+Caus"] ["+Base"|"+Causative"] 2ndSeries   S=DO3=OTh  _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblTh>" <- "+CS" || [trans|unerg|"+Caus"] ["+Base"|"+Causative"] 3rdSeries      S=DO3=OTh  _ ]

    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjTh>" <- "+CS" || "+Caus" "+Causative" 1stSeries   S=DO  _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjTh>" <- "+CS" || "+Caus" "+Causative" 2ndSeries   S=DO  _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblTh>"    <- "+CS" || "+Caus" "+Causative" 3rdSeries   S=DO  _ ]

    		  .o. [ "+<NomSubj>" "+<DatObjBen>" <- "+CS" || unacc "+Passive" ?* S=DO3=OBen _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjLoc>" <- "+CS" || unacc "+Passive" ?* S=DO3=OLoc _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS" || unacc "+Passive" ?* S=DO3=OTh _ ]

    		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 1stSeries   S=OTh  _ ] # გისმენ
       		  .o. [ "+<ErgSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 2ndSeries   S=OTh  _ ]
       		  .o. [ "+<DatSubj>" "+<OblTh>" <- "+CS"     || [trans|unerg] "+Base" 3rdSeries   S=OTh  _ ]
       		  .o.
		      [ "+<NomSubj>" <- "+CS"		     || [trans|unerg] "+Base" 1stSeries S= _ ]
       		  .o. [ "+<ErgSubj>" <- "+CS" 		     || [trans|unerg] "+Base" 2ndSeries S= _ ]
       		  .o. [ "+<DatSubj>" <- "+CS" 		     || [trans|unerg] "+Base" 3rdSeries S= _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjBen>" <- "+CS" || [trans|unerg] "+Base" 1stSeries   S=OBen  _ ]
       		  .o. [ "+<ErgSubj>" "+<DatObjBen>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries   S=OBen  _ ]
       		  .o. [ "+<DatSubj>" "+<OblBen>" <- "+CS"    || [trans|unerg] "+Base" 3rdSeries      S=OBen  _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg] "+Base" 1stSeries   S=OLoc  _ ]
       		  .o. [ "+<ErgSubj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries   S=OLoc  _ ]
       		  .o. [ "+<DatSubj>" "+<OblLoc>" <- "+CS"    || [trans|unerg] "+Base" 3rdSeries      S=OLoc  _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 1stSeries   S=OTh  _ ]
       		  .o. [ "+<ErgSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 2ndSeries   S=OTh  _ ]
       		  .o. [ "+<DatSubj>" "+<OblTh>" <- "+CS"     || [trans|unerg] "+Base" 3rdSeries      S=OTh  _ ]
    		  .o.
		      [ "+<NomSubj>" <- "+CS"		     || unacc ?* S= _ ]
    		  .o. [ "+<NomSubj>" "+<DatObj>" <- "+CS"    || unacc "+Base" ?* S=DO _ ] # იძლევა
		  .o. [ "+<ErgSubj>" "+<NomObj>" <- "+CS"  # უწყის: MedAct, იცის: MedPass (why?)
		        || [{უწყებ[ა]/უწყ}|{ცოდნ[ა]/ც}] "+V" [unerg|unacc] "+Base" 1stSeries "+<S-DO>" _ ] # იცის, უწყის
       		  .o. [ "+<NomSubj>" <- "+CS"    || unacc "+Passive" ?* S=DO _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjBen>" <- "+CS" || unacc ?* S=OBen _ ]
       		  .o. [ "+<NomSubj>" "+<DatObjLoc>" <- "+CS" || unacc ?* S=OLoc _ ]
       		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS"  || unacc ?* S=OTh _ ]
    		  .o.
		      [ "+<NomSubj>" "+<DatObj>" "+<DatObjTh>" <- "+CS" 
		        || unacc "+Base" ?*   S=DO3=OTh  _ ] # მას დაგპირდ(ებ)ი, დაგპირებივარ
       		  .o. 
		      [ "+<DatSubj>" <- "+CS" || "+Inv" ?* S= _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" <- "+CS" || "+Inv" ?* S=DO _ ]
       		  .o. [ "+<DatSubj>" "+<GenObj>" <- "+CS" || "+Inv" ?* S=OGen _ ]
       		  .o. [ 0 <- "+CS" || Empty _ ] ;

# not used
define CaseSyntaxOG   [ "+<NomSubj>" "+<DatObj>" <- "+CS" || [trans|unerg] "+Base" 1stSeries S=DO _ ] # Unerg: მიყიდია
       		  .o. [ "+<ErgSubj>" "+<NomObj>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries S=DO _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" <- "+CS" || [trans|unerg] "+Base" 3rdSeries S=DO _ ]

    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjBen>" <- "+CS" || [trans|unerg|unacc] # unacc for მეუბნება
		      		     		 		   	     "+Base" 1stSeries S=DO3=OBen _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjBen>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries S=DO3=OBen _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblBen>" <- "+CS" || [trans|unerg] "+Base" 3rdSeries    S=DO3=OBen _ ]
    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg|unacc] "+Base" 1stSeries S=DO3=OLoc _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries S=DO3=OLoc _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblLoc>" <- "+CS" || [trans|unerg] "+Base" 3rdSeries    S=DO3=OLoc _ ]
    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjTh>" <- "+CS" || [trans|unerg|"+Caus"] ["+Base"|"+Causative"] 1stSeries   S=DO3=OTh  _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjTh>" <- "+CS" || [trans|unerg|"+Caus"] ["+Base"|"+Causative"] 2ndSeries   S=DO3=OTh  _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblTh>" <- "+CS" || [trans|unerg|"+Caus"] ["+Base"|"+Causative"] 3rdSeries      S=DO3=OTh  _ ]

    		  .o. [ "+<NomSubj>" "+<DatObj>" "+<DatObjTh>" <- "+CS" || "+Caus" "+Causative" 1stSeries   S=DO  _ ]
       		  .o. [ "+<ErgSubj>" "+<NomObj>" "+<DatObjTh>" <- "+CS" || "+Caus" "+Causative" 2ndSeries   S=DO  _ ]
       		  .o. [ "+<DatSubj>" "+<NomObj>" "+<OblTh>"    <- "+CS" || "+Caus" "+Causative" 3rdSeries   S=DO  _ ]

    		  .o. [ "+<NomSubj>" "+<DatObjBen>" <- "+CS" || unacc "+Passive" ?* S=DO3=OBen _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjLoc>" <- "+CS" || unacc "+Passive" ?* S=DO3=OLoc _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS" || unacc "+Passive" ?* S=DO3=OTh _ ]

    		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 1stSeries   S=OTh  _ ] # გისმენ
       		  .o. [ "+<ErgSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 2ndSeries   S=OTh  _ ]
       		  .o. [ "+<DatSubj>" "+<OblTh>" <- "+CS"     || [trans|unerg] "+Base" 3rdSeries   S=OTh  _ ]
       		  .o.
		      [ "+<NomSubj>" <- "+CS"		     || [trans|unerg] "+Base" 1stSeries S= _ ]
       		  .o. [ "+<ErgSubj>" <- "+CS" 		     || [trans|unerg] "+Base" 2ndSeries S= _ ]
       		  .o. [ "+<DatSubj>" <- "+CS" 		     || [trans|unerg] "+Base" 3rdSeries S= _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjBen>" <- "+CS" || [trans|unerg] "+Base" 1stSeries   S=OBen  _ ]
       		  .o. [ "+<ErgSubj>" "+<DatObjBen>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries   S=OBen  _ ]
       		  .o. [ "+<DatSubj>" "+<OblBen>" <- "+CS"    || [trans|unerg] "+Base" 3rdSeries      S=OBen  _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg] "+Base" 1stSeries   S=OLoc  _ ]
       		  .o. [ "+<ErgSubj>" "+<DatObjLoc>" <- "+CS" || [trans|unerg] "+Base" 2ndSeries   S=OLoc  _ ]
       		  .o. [ "+<DatSubj>" "+<OblLoc>" <- "+CS"    || [trans|unerg] "+Base" 3rdSeries      S=OLoc  _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 1stSeries   S=OTh  _ ]
       		  .o. [ "+<ErgSubj>" "+<DatObjTh>" <- "+CS"  || [trans|unerg] "+Base" 2ndSeries   S=OTh  _ ]
       		  .o. [ "+<DatSubj>" "+<OblTh>" <- "+CS"     || [trans|unerg] "+Base" 3rdSeries      S=OTh  _ ]
    		  .o.
		      [ "+<NomSubj>" <- "+CS"		     || unacc ?* S= _ ]
    		  .o. [ "+<NomSubj>" "+<DatObj>" <- "+CS"    || unacc "+Base" ?* S=DO _ ] # იძლევა
		  .o. [ "+<ErgSubj>" "+<NomObj>" <- "+CS" 
		        || [{უწყებ[ა]/უწყ}|{ცოდნ[ა]/ც}] "+V" [unerg|unacc] "+Base" 1stSeries "+<S-DO>" _ ] # იცის, უწყის
       		  .o. [ "+<NomSubj>" <- "+CS"    || unacc "+Passive" ?* S=DO _ ]
    		  .o. [ "+<NomSubj>" "+<DatObjBen>" <- "+CS" || unacc ?* S=OBen _ ]
       		  .o. [ "+<NomSubj>" "+<DatObjLoc>" <- "+CS" || unacc ?* S=OLoc _ ]
       		  .o. [ "+<NomSubj>" "+<DatObjTh>" <- "+CS"  || unacc ?* S=OTh _ ]
    		  .o.
		      [ "+<NomSubj>" "+<DatObj>" "+<DatObjTh>" <- "+CS" 
		        || unacc "+Base" ?*   S=DO3=OTh  _ ] # მას დაგპირდ(ებ)ი, დაგპირებივარ
       		  .o. 
		      [ "+<DatObj>" <- "+CS" || "+Inv" ?* S= _ ]
       		  .o. [ "+<NomSubj>" "+<DatObj>" <- "+CS" || "+Inv" ?* S=DO _ ]
       		  .o. [ "+<DatSubj>" "+<GenObj>" <- "+CS" || "+Inv" ?* S=OGen _ ]
       		  .o. [ 0 <- "+CS" || Empty _ ] ;


define isInverted   [ 3rdSeriesInverted ?* 3rdSeries | "+Inv" ] ;
# not used
define isInvertedOG [ 3rdSeriesInverted ?* 3rdSeries ] ;

define Invert	[ ... "+Inv" <- 3rdSeries,   # mark 3rd series as inverted 
       		  0 <- "+OV" | "+SV" | "+LV" # remove version marking
       		 || 3rdSeriesInverted _ ]
       		.o.
		[ "+Subj1Sg" <- "+FObj1Sg",
       		  "+Subj2Sg" <- "+FObj2Sg",
       		  "+Subj3Sg" <- "+FObj3Sg",
       		  "+Subj1Pl" <- "+FObj1Pl",
       		  "+Subj2Pl" <- "+FObj2Pl",
       		  "+Subj3Pl" <- "+FObj3Pl",
       		  "+Subj1" <- "+FObj1",
       		  "+Subj2" <- "+FObj2",
       		  "+Subj3" <- "+FObj3",
		  "+Obj1Sg" <- "+FSubj1Sg",
       		  "+Obj2Sg" <- "+FSubj2Sg",
       		  "+Obj3" <- "+FSubj3Sg",
       		  "+Obj1Pl" <- "+FSubj1Pl",
       		  "+Obj2Pl" <- "+FSubj2Pl",
       		  "+Obj3" <- "+FSubj3Pl", # should not occur
       		  "+Obj1" <- "+FSubj1",
       		  "+Obj2" <- "+FSubj2",
       		  "+Obj3" <- "+FSubj3"
		  || isInverted ?* _ ]
		.o.
		[ "+Obj3Sg" <- "+FSubj3"
		  || isInverted ?* _ ?* "+DirObjSg" ]
		.o.
		[ "+Obj3Pl" <- "+FSubj3"
		  || isInverted ?* _ ?* "+DirObjPl" ] ;

# those not removed by the Invert rule
define RemoveF	[ "+Subj1Sg" <- "+FSubj1Sg",
       		  "+Subj2Sg" <- "+FSubj2Sg",
       		  "+Subj3Sg" <- "+FSubj3Sg",
       		  "+Subj1Pl" <- "+FSubj1Pl",
       		  "+Subj2Pl" <- "+FSubj2Pl",
       		  "+Subj3Pl" <- "+FSubj3Pl",
       		  "+Subj1" <- "+FSubj1",
       		  "+Subj2" <- "+FSubj2",
       		  "+Subj3" <- "+FSubj3",
		  "+Obj1Sg" <- "+FObj1Sg",
       		  "+Obj2Sg" <- "+FObj2Sg",
       		  "+Obj3" <- "+FObj3Sg",
       		  "+Obj1Pl" <- "+FObj1Pl",
		  "+Obj2Pl" <- "+FObj2Pl",
       		  "+Obj3Pl" <- "+FObj3Pl", # ?? fix: difference between გაეპარება and გაეპარებათ
       		  "+Obj1" <- "+FObj1",
       		  "+Obj2" <- "+FObj2",
       		  "+Obj3" <- "+FObj3" ] ;

define RemoveCard [[?:?]* - [?:?]* ["+Card":?] [?:?]*] ;

define Punctuation [ {.} "+Punct":0 "+Period":0
		   | {,} "+Punct":0 "+Comma":0
		   | ":" "+Punct":0 "+Colon":0
		   | {;} "+Punct":0 "+Semicolon":0
		   | {?} "+Punct":0 "+IntMark":0
		   | {!} "+Punct":0 "+ExclPoint":0
		   | {…} "+Punct":0 "+Ellipsis":0
		   | {(} "+Punct":0 "+Paren":0
		   | {)} "+Punct":0 "+Paren":0
		   | {[} "+Punct":0 "+Bracket":0
		   | {]} "+Punct":0 "+Bracket":0
		   | "{" "+Punct":0 "+Paren":0
		   | "}" "+Punct":0 "+Paren":0
		   | {"} "+Punct":0 "+Quote":0
		   | {„} "+Punct":0 "+Quote":0
		   | {“} "+Punct":0 "+Quote":0
		   | {”} "+Punct":0 "+Quote":0
		   | {‚} "+Punct":0 "+Quote":0
		   | {‘} "+Punct":0 "+Quote":0
		   | {’} "+Punct":0 "+Quote":0
		   | {»} "+Punct":0 "+Quote":0
		   | {«} "+Punct":0 "+Quote":0
		   | {›} "+Punct":0 "+Quote":0
		   | {‹} "+Punct":0 "+Quote":0
		   | {-} "+Punct":0 "+Hyphen":0
		   | {–} "+Punct":0 "+Dash":0
		   | {—} "+Punct":0 "+Dash":0
		   | {·} "+Punct":0 "+Dot":0
		   | {*} "+Symbol":0 "+Star":0
		   | {_} "+Symbol":0
		   | {/} "+Symbol":0
		   | {\} "+Symbol":0
		   | {|} "+Symbol":0
		   | {%} "+Symbol":0
		   | {&} "+Symbol":0
		   | {#} "+Symbol":0
		   | {§} "+Symbol":0
		   | {+} "+Symbol":0
		   | {@} "+Symbol":0
		   | {^} "+Symbol":0
		   | {¢} "+Symbol":0
		   | [€|£|©|®|¥|º|№] "+Symbol":0
		   ] ;

define FracDigitNumber	   ["0"|1|2|3|4|5|6|7|8|9]+ ([","|"."] ["0"|1|2|3|4|5|6|7|8|9]+)
       		   	 | ["0"|1|2|3|4|5|6|7|8|9]^{1,3} ["." ["0"|1|2|3|4|5|6|7|8|9]^{3,3}]*
		     	   ("," ["0"|1|2|3|4|5|6|7|8|9]+) ;

define WholeDigitNumber	   ["0"|1|2|3|4|5|6|7|8|9]+
       		   	 | ["0"|1|2|3|4|5|6|7|8|9]^{1,3} ["." ["0"|1|2|3|4|5|6|7|8|9]^{3,3}]* ;

define CardinalDigits [ ("-") (["0"|1|2|3|4|5|6|7|8|9]+ [","|"."]) ["0"|1|2|3|4|5|6|7|8|9]+ ]
       		      "+Num":0 ["+Card":0 | "+Ord":0] "+Digits":0;

#define CardinalDigitsRange [ (["0"|1|2|3|4|5|6|7|8|9]+ ",") ["0"|1|2|3|4|5|6|7|8|9]+ ]
#      			   [ "-":Hyphen (["0"|1|2|3|4|5|6|7|8|9]+ ",") ["0"|1|2|3|4|5|6|7|8|9]+ ]+
#			     "+Num":0 ["+Card":0 | "+Ord":0] "+Digits":0 "+Range":0;

define CardinalDigitsRange WholeDigitNumber
       			   [ "-":Hyphen WholeDigitNumber ]+
			     "+Num":0 ["+Card":0 | "+Ord":0] "+Digits":0 "+Range":0;

define OrdinalDigits  [ 0:{მე-} [1|2|3|4|5|6|7|8|9] ["0"|1|2|3|4|5|6|7|8|9]* "+Num":0 "+Ord":0 "+Digits":0
       		      | [1|2|3|4|5|6|7|8|9] ["0"|1|2|3|4|5|6|7|8|9]* "+Num":0 "+Ord":"." "+Digits":0 ] ;

define TimeDigits     (["0"|1|2]) ["0"|1|2|3|4|5|6|7|8|9] ":" ["0"|1|2|3|4|5|6] ["0"|1|2|3|4|5|6|7|8|9]
       		      "+Num":0 "+Digits":0 "+Time":0 ;

# Roman numerals

define dropzeros	  [ 0 <-@ {0}* || .#. _ ];

define RomanNum1	 {1}:{I}|{2}:{II}|{3}:{III}|{4}:{IIII}|{4}:{IV}|{5}:{V}
       			|{6}:{VI}|{7}:{VII}|{8}:{VIII}|{9}:{VIIII}|{9}:{IX}|{0}:0 ;
define RomanNum10	 {1}:{X}|{2}:{XX}|{3}:{XXX}|{4}:{XXXX}|{4}:{XL}|{5}:{L}
       			|{6}:{LX}|{7}:{LXX}|{8}:{LXXX}|{9}:{LXXXX}|{9}:{XC}|{0}:0 ;
define RomanNum100	 {1}:{C}|{2}:{CC}|{3}:{CCC}|{4}:{CCCC}|{4}:{CD}|{5}:{D}
       			|{6}:{DC}|{7}:{DCC}|{8}:{DCCC}|{9}:{DCCCC}|{9}:{CM}|{0}:0 ;
define RomanNum1000	 {1}:{M}|{2}:{MM}|{3}:{MMM}|{4}:{MMMM}|{0}:0 ;

define RomanNumBase 	  dropzeros
       			  .o.
			  [ RomanNum1000 RomanNum100 RomanNum10 RomanNum1 ]
			  .o.		 
			  [ [I|V|X|L|C|D|M] ?* ] ;

define RomanNumOld 	  dropzeros
       			  .o.
			  [ RomanNum1000 RomanNum100 RomanNum10 RomanNum1
			    "+Num":0 [ "+Card":0 | "+Ord":"." ] "+Roman":0 ]
			  .o.		 
			  [ [I|V|X|L|C|D|M] ?* ] ;

define RomanNum 	 [ RomanNumBase "+Num":0 [ "+Card":0 | "+Ord":0 | "+Ord":"." ] "+Roman":0
       			 | RomanNumBase "-":Hyphen RomanNumBase "+Num":0
			   [ "+Card":0 | "+Ord":0 | "+Ord":"." ] "+Roman":0 "+Range":0
			 | RomanNumBase ["+Num" "+Ord" "+Roman"]:0 [ "+Erg":{-მ} | "+Dat":{-ს} | "+Gen":{-ის} ]
			 | 0:{მე-} RomanNumBase ["+Num" "+Ord" "+Roman"]:0 ( "+Erg":{-მ} | "+Dat":{-ს} | "+Gen":{-ის} )
			 ] ;

# Georgian Letter numerals, e.g., კ̂გ, კ̅გ̅ გ̅

define OGLetterNum1	  {1}:{ა}|{2}:{ბ}|{3}:{გ}|{4}:{დ}|{5}:{ე}|{6}:{ვ}|{7}:{ზ}|{8}:{ჱ}|{9}:{თ}|{0}:0 ;
define OGLetterNum10   	  {1}:{ი}|{2}:{კ}|{3}:{ლ}|{4}:{მ}|{5}:{ნ}|{6}:{ჲ}|{7}:{ო}|{8}:{პ}|{9}:{ჟ}|{0}:0 ;
define OGLetterNum100  	  {1}:{რ}|{2}:{ს}|{3}:{ტ}|{4}:{ჳ}|{4}:{უ}|{5}:{ფ}|{6}:{ქ}|{7}:{ღ}|{8}:{ყ}|{9}:{შ}|{0}:0 ;
define OGLetterNum1000    {1}:{ჩ}|{2}:{ც}|{3}:{ძ}|{4}:{წ}|{5}:{ჭ}|{6}:{ხ}|{7}:{ჴ}|{8}:{ჯ}|{9}:{ჰ}|{0}:0 ;
define OGLetterNum10000   {1}:{ჵ}|{0}:0 ;

# fixme: can have case endings!
define OGLetterNum 	  dropzeros
       			  .o.
			  [ OGLetterNum10000 OGLetterNum1000 OGLetterNum100 OGLetterNum10 OGLetterNum1
       			    "+Num":0 "+Card":0 "+Letter":0 ]
			  .o.
			  [ 0 <- ["̂"|"̅"|"͞"] ]
			  .o.
			  [ ?* ["̂"|"̅"|"͞"] ?* ] ;

define Character	  [ა|ბ|გ|დ|ე|ვ|ზ|თ|ი|კ|ლ|მ|ნ|ო|პ|ჟ|რ|ს|ტ|უ|ფ|ქ|ღ|ყ|შ|ჩ|ც|ძ|წ|ჭ|ხ|ჯ|ჰ] ;

#read regex  	Verb .o. NewG ;
#eliminate flag Frame
#save stack verb-debug1.fst
#pop stack

#read regex	RemoveF .o. Invert .o. Verb .o. NewG ;
#eliminate flag Frame
#save stack verb-debug.fst
#pop stack

#read regex	ArgSyntax .o. RemoveF .o. Invert .o. Verb .o. NewG ;
#eliminate flag Frame
#save stack verb-debug0.fst
#pop stack

# used for reduplication; still has Frame and Genus flags, rename!
#read regex [ ვ <- u ] .o. verbMorphNG .o. NewG ;
#save stack verb-morph-ng.fst
#pop stack

# read regex 	    ArgSyntax .o. RemoveF .o. Invert .o. Verb ;
# save stack arg-syntax.fst
# pop stack

# not used
# define PP [ "+PP:გან" | "+PP:და" | "+PP:დამ" | "+PP:დამი" | "+PP:დან" | "+PP:დმი" | "+PP:ებრ" | "+PP:ებრივ" | "+PP:ვით" | "+PP:ზე" | "+PP:ზედ" | "+PP:თან" | "+PP:თვის" | "+PP:კენ" | "+PP:მდე" | "+PP:მდინ" | "+PP:მდის" | "+PP:მებრ" | "+PP:ურთ" | "+PP:ქვეშ" | "+PP:ში" | "+PP:წინ" ] ;

# disabled
#define AtoAdv		    [ {ად/} <- {-ი/}, 0 <- {[ა]}, 0 <- {[ე]} || _ ?* "+Adv" "+Mann" ]
#	    		.o. [ "+Adv" "+Mann" (<-) "+Part" "+PastPart" "+Advb" "+Sg" ]
#	    		.o. [ {ად} "+Adv" "+Mann" (<-) [{-ი}|{[ა]} ({-ჲ})] "+A" "+Advb" "+Sg" ]
#	    		.o. [ {ედ} "+Adv" "+Mann" (<-) {[ე]} ({-ჲ}) "+A" "+Advb" "+Sg" ]
#	    		.o. [ დ "+Adv" "+Mann" (<-) ({-ჲ}) "+A" "+Advb" "+Sg" || [ო|უ|ა|ე] _ ]
#			;

# prelim, merge with textual numbers 
define cardPP	     "+PP:ში":{ში}
       		   | "+PP:ზე":{ზე}
       		   | "+PP:დან":{დან}
       		   | "+PP:მდე":{მდე} ;

define georgianChar [ა|ბ|გ|დ|ე|ვ|ზ|თ|ი|კ|ლ|მ|ნ|ო|პ|ჟ|რ|ს|ტ|უ|ფ|ქ|ღ|ყ|შ|ჩ|ც|ძ|წ|ჭ|ხ|ჯ|ჰ|ჱ|ჲ|ჳ|ჴ|ჵ] ;

# comment and uncomment as appropriate

## NG

echo > sourcing syntax-ng.regex …
source syntax-ng.regex
echo > loaded syntax-ng.regex

# exit

## MG, OG

echo > sourcing syntax-og-common.regex …
source syntax-og-common.regex
echo > loaded syntax-og-common.regex

## OG, needs syntax-og-common.regex

echo > sourcing syntax-og.regex …
source syntax-og.regex
echo > loaded syntax-og.regex


## MG, needs syntax-og-common.regex

echo > sourcing syntax-mg.regex …
source syntax-mg.regex
echo > loaded syntax-mg.regex


# fst to foma:
# fst> write prolog > georgian-morph-ng.pl
# foma> read prolog georgian-morph-ng.pl
# foma> save stack georgian-morph-ng.foma

# without tags:
# fst> define morph ;
# fst> source tags.regex
# fst> read regex [ 0 <- tags ] .o. morph ;

# fst> write prolog > georgian-lemmas-ng.pl
# foma> read prolog georgian-lemmas-ng.pl
# foma> save stack georgian-lemmas-ng.foma

# the same for georgian-comp-ng.fst -> georgian-comp-ng.foma, georgian-comp-lemmas-ng.foma

# EOF