define Root ;

echo Root defined.

load defined noun.vars

define georgianChar ა|ბ|გ|დ|ე|ვ|ზ|თ|ი|კ|ლ|მ|ნ|ო|პ|ჟ|რ|ს|ტ|უ|ფ|ქ|ღ|ყ|შ|ჩ|ც|ძ|წ|ჭ|ხ|ჯ|ჰ|ჴ|ჱ|ჲ|ჵ|ჳ ;

# ???
#define ReduplicationRoot     [ 0 <- ? ] 
#			 .o. Root
#       			 ### .o. [ ?* "@U.Reduplication.+@" ?*]
#			 .o. [ \georgianChar -> 0 ] ;

# echo > ReduplicationRoot defined.

load stack past-part-list.fst

define PastParticipleRoot ;

load stack future-part-list.fst

define FutureParticipleRoot ; 

load stack present-part-list.fst

define PresentParticipleRoot ;

load stack negative-part-list.fst

define NegativeParticipleRoot ;

load stack masdar-list.fst

define MasdarRoot ;

# define ReduplicationRoot 0:{$} ;

# keep on lower side, used by phonotactics
# keep list in sync with phonotactics.regex etc.
define ResolveFrameFlagDiacritics [
      "@R.Version.SV@" [ "@R.Vv.ი@" "+SV":0 | "@D.Vv.ი@" ]
    | "@R.Version.OV@" [ "@R.Vv.უ@" "+OV":0 | "@D.Vv.უ@" ]
    | "@R.Version.LV@" [ "@R.Vv.ა@" "+LV":0 | "@D.Vv.ა@" ]
    | "@D.Version@" ]
  [ "@R.Frame.??@" "+<??>" | "@D.Frame.??@" ]
  [ "@R.Frame.S@" "+<S>" | "@D.Frame.S@" ]
  [ "@R.Frame.S-R@" "+<S-R>" | "@D.Frame.S-R@" ]
  [ "@R.Frame.S-R-Obl_Si@" "+<S-R-Obl_Si>" | "@D.Frame.S-R-Obl_Si@" ]
  [ "@R.Frame.S-DO@" "+<S-DO>" | "@D.Frame.S-DO@" ]
  [ "@R.Frame.S-DO-R@" "+<S-DO-R>" | "@D.Frame.S-DO-R@" ]
  [ "@R.Frame.S-DO-Pnom@" "+<S-DO-Pnom>" | "@D.Frame.S-DO-Pnom@" ]
  [ "@R.Frame.S-DO-Padv@" "+<S-DO-Padv>" | "@D.Frame.S-DO-Padv@" ]
  [ "@R.Frame.S-DO-Pred@" "+<S-DO-Pred>" | "@D.Frame.S-DO-Pred@" ]
  [ "@R.Frame.S-DO-Obl_ze@" "+<S-DO-Obl_ze>" | "@D.Frame.S-DO-Obl_ze@" ]
  [ "@R.Frame.S-DO3-OBen@" "+<S-DO3-OBen>" | "@D.Frame.S-DO3-OBen@" ]
  [ "@R.Frame.S-DO3-OBen-Pred@" "+<S-DO3-OBen-Pred>" | "@D.Frame.S-DO3-OBen-Pred@" ]
  [ "@R.Frame.S-DO3-OLoc@" "+<S-DO3-OLoc>" | "@D.Frame.S-DO3-OLoc@" ]
  [ "@R.Frame.S-DO3-OBen-Padv@" "+<S-DO3-OBen-Padv>" | "@D.Frame.S-DO3-OBen-Padv@" ]
  [ "@R.Frame.S-DO3-OTh@" "+<S-DO3-OTh>" | "@D.Frame.S-DO3-OTh@" ]
  [ "@R.Frame.S-DOR-Padv@" "+<S-DO-R-Padv>" | "@D.Frame.S-DOR-Padv@" ] # fix value: DOR -> DO-R
  [ "@R.Frame.S-DOR-Pred@" "+<S-DO-R-Pred>" | "@D.Frame.S-DOR-Pred@" ] # fix value: DOR -> DO-R
  [ "@R.Frame.S-D-OR-Padv@" "+<S-DO-R-Padv>" | "@D.Frame.S-D-OR-Padv@" ]
  [ "@R.Frame.S-D-OR-Pred@" "+<S-DO-R-Pred>" | "@D.Frame.S-D-OR-Pred@" ]
  [ "@R.Frame.S-Pnom@" "+<S-Pnom>" | "@D.Frame.S-Pnom@" ]
  [ "@R.Frame.S-Padv@" "+<S-Padv>" | "@D.Frame.S-Padv@" ]
  [ "@R.Frame.S-Pred@" "+<S-Pred>" | "@D.Frame.S-Pred@" ]
  [ "@R.Frame.S-Obl_ze@" "+<S-Obl_ze>" | "@D.Frame.S-Obl_ze@" ]
  [ "@R.Frame.S-Obl_inst@" "+<S-Obl_inst>" | "@D.Frame.S-Obl_inst@" ]
  [ "@R.Frame.S-Obl_adv@" "+<S-Obl_adv>" | "@D.Frame.S-Obl_adv@" ]
  [ "@R.Frame.S-OTh@" "+<S-OTh>" | "@D.Frame.S-OTh@" ]
  [ "@R.Frame.S-[OTh]@" "+<S-[OTh]>" | "@D.Frame.S-[OTh]@" ]
  [ "@R.Frame.S-[OTh]inv@" "+<S-[OTh]>" | "@D.Frame.S-[OTh]inv@" ]
  [ "@R.Frame.S-OTh-Obl_Si@" "+<S-OTh-Obl_Si>" | "@D.Frame.S-OTh-Obl_Si@" ]
  [ "@R.Frame.S-OTh-Pred@" "+<S-OTh-Pred>" | "@D.Frame.S-OTh-Pred@" ]
  [ "@R.Frame.S-OBen@" "+<S-OBen>" | "@D.Frame.S-OBen@" ]
  [ "@R.Frame.S-OLoc@" "+<S-OLoc>" | "@D.Frame.S-OLoc@" ]
  [ "@R.Frame.S-OGen@" "+<S-OGen>" | "@D.Frame.S-OGen@" ]
  [ "@R.Frame.Empty@" "+<Null>" | "@D.Frame.Empty@" ]
  [ "@R.Frame.AuxTrans@" "+<AuxTrans>" | "@D.Frame.AuxTrans@" ]
  [ "@R.Frame.AuxTransHum@" "+<AuxTransHum>" | "@D.Frame.AuxTransHum@" ]
  [ "@R.Frame.AuxIntr@" "+<AuxIntr>" | "@D.Frame.AuxIntr@" ]
  [ "@R.Frame.KonaAux@" "+<KonaAux>" | "@D.Frame.KonaAux@" ]
  [ "@R.Frame.QolaAux@" "+<QolaAux>" | "@D.Frame.QolaAux@" ]
  [ "@R.Frame.QoPnaAux@" "+<QoPnaAux>" | "@D.Frame.QoPnaAux@" ]
  ;

define ResolveVerbClassFlagDiacritics "@D.Parsing.-@"
  [ "@R.Cat.v@" "+V":0 | "@D.Cat.v@" ]
  # new classes
  [ "@R.Genus.Act@" "+Act":0 | "@D.Genus.Act@" ]
  [ "@R.Genus.Pass@" "+Pass":0 | "@D.Genus.Pass@" ]
  [ "@R.Genus.MedAct@" "+MedAct":0 | "@D.Genus.MedAct@" ]
  [ "@R.Genus.MedPass@" "+MedPass":0 | "@D.Genus.MedPass@" ]
  [ "@R.Genus.StatPass@" "+PassState":0 | "@D.Genus.StatPass@" ]
  [ "@R.Genus.Caus@" "+Caus":0 | "@D.Genus.Caus@" ]

  [ "@R.VClass.inv@" "+Inv" 
  | "@D.VClass.inv@" [ "@R.Frame.S-[OTh]inv@" "+Inv" | "@D.Frame.S-[OTh]inv@" ] # OG inverted statives
  ] # +Inv on lower side is needed in phonotactics
  [ "@R.VClass.part@" "+Part":0 | "@D.VClass.part@" ]
  [ "@R.Alternation.causative@" "+Causative":0 | "@R.Alternation.passive@" "+Passive":0
  | "@D.Alternation.causative@" "@D.Alternation.passive@" "+Base":0 ]
  [ "@R.Redup.+@" "+Redup":0 | "@D.Redup@"]
  ;

# keep tense on lower side
define ResolveVerbTenseFlagDiacritics [
    "@R.Tense.masdar@" "+VN" | "@D.Tense.masdar@" ]
  [ "@R.Tense.future-part@" "+FutPart" | "@D.Tense.future-part@" ]
  [ "@R.Tense.past-part@" "+PastPart" | "@D.Tense.past-part@" ]
  [ "@R.Tense.present-part@" "+PresPart" | "@D.Tense.present-part@" ]
  [ "@R.Tense.negative-part@" "+NegPart" | "@D.Tense.negative-part@" ]
  [ "@R.Tense.perfect@" "+Perf" | "@D.Tense.perfect@" ]
  [ "@R.Tense.conj-perfect@" "+ConjPerf" | "@D.Tense.conj-perfect@" ]
  [ "@R.Tense.pluperfect@" "+PluPerf" | "@D.Tense.pluperfect@" ]
  [ "@R.Tense.optative@" "+Opt" | "@D.Tense.optative@" ]
  [ "@R.Tense.aorist@" "+Aor" | "@D.Tense.aorist@" ]
  [ "@R.Tense.future@" "+Fut" | "@D.Tense.future@" ]
  [ "@R.Tense.present@" "+Pres" | "@D.Tense.present@" ]
  [ "@R.Tense.conj-future@" "+ConjFut" | "@D.Tense.conj-future@" ]
  [ "@R.Tense.conj-present@" "+ConjPres" | "@D.Tense.conj-present@" ]
  [ "@R.Tense.conditional@" "+Cond" | "@D.Tense.conditional@" ]
  [ "@R.Tense.imperfect@" "+Impf" | "@D.Tense.imperfect@" ]
  [ "@R.Tense.iter-present@" "+IterPres" | "@D.Tense.iter-present@" ]
  [ "@R.Tense.iter-imperfect@" "+IterImpf" | "@D.Tense.iter-imperfect@" ]
  [ "@R.Tense.iter-aorist@" "+IterAor" | "@D.Tense.iter-aorist@" ]
  [ "@R.Tense.iter-perfect@" "+IterPerf" | "@D.Tense.iter-perfect@" ]
  [ "@R.Tense.iter-perfect1@" "+IterPerf1" | "@D.Tense.iter-perfect1@" ]
  [ "@R.Tense.imperative-present@" "+ImpvPres" | "@D.Tense.imperative-present@" ]
  [ "@R.Tense.imperative-aorist@" "+ImpvAor" | "@D.Tense.imperative-aorist@" ]
  [ "@R.Aspect.imperf@" "+Imperfective" | "@D.Aspect.imperf@" ]
  [ "@R.Pv.-@" | "@D.Pv.-@" "+Pv":0 ] ;

define ResolveVerbPersFlagDiacritics [
    "@R.Subj-Pers.1@" [ "@R.Subj-Num.sg@" "@D.Subj-Num.pl@" "+FSubj1Sg":0 | 
                        "@D.Subj-Num.sg@" "@R.Subj-Num.pl@" "+FSubj1Pl":0 | 
                        "@D.Subj-Num.sg@" "@D.Subj-Num.pl@" "+FSubj1":0 ]
    | "@D.Subj-Pers.1@" ]
  [ "@R.Subj-Pers.2@" [ "@R.Subj-Num.sg@" "@D.Subj-Num.pl@" "+FSubj2Sg":0 | 
                        "@D.Subj-Num.sg@" "@R.Subj-Num.pl@" "+FSubj2Pl":0 | 
                        "@D.Subj-Num.sg@" "@D.Subj-Num.pl@" "+FSubj2":0 ]
    | "@D.Subj-Pers.2@" ]
  [ "@R.Subj-Pers.3@" [ "@R.Subj-Num.sg@" "@D.Subj-Num.pl@" "+FSubj3Sg":0 | 
                        "@D.Subj-Num.sg@" "@R.Subj-Num.pl@" "+FSubj3Pl":0 | 
                        "@D.Subj-Num.sg@" "@D.Subj-Num.pl@" "+FSubj3":0 ]
    | "@D.Subj-Pers.3@" ]
  [ "@R.Obj-Pers.1@"  [ "@R.Obj-Num.sg@" "@D.Obj-Num.pl@" "+FObj1Sg":0 | 
                        "@D.Obj-Num.sg@" "@R.Obj-Num.pl@" "+FObj1Pl":0 | 
                        "@D.Obj-Num.sg@" "@D.Obj-Num.pl@" "+FObj1":0 ]
		      [ "@R.Obj-Incl1pl.+@" "+[Incl]":0 | "@D.Obj-Incl1pl.+@" "+[Excl]":0]
    | "@D.Obj-Pers.1@" ]
  [ "@R.Obj-Pers.2@"  [ "@R.Obj-Num.sg@" "@D.Obj-Num.pl@" "+FObj2Sg":0 | 
                        "@D.Obj-Num.sg@" "@R.Obj-Num.pl@" "+FObj2Pl":0 | 
                        "@D.Obj-Num.sg@" "@D.Obj-Num.pl@" "+FObj2":0 ]
    | "@D.Obj-Pers.2@" ]
  [ "@R.Obj-Pers.3@"  [ "@R.Obj-Num.sg@" "@D.Obj-Num.pl@" "+FObj3Sg":0 | 
                        "@D.Obj-Num.sg@" "@R.Obj-Num.pl@" "+FObj3Pl":0 | 
                        "@D.Obj-Num.sg@" "@D.Obj-Num.pl@" "+FObj3":0 ]
    | "@D.Obj-Pers.3@" ]
  # OG
  [ "@R.DirObj-Num.sg@" "@D.DirObj-Num.pl@" "+DirObjSg":0 |
    "@D.DirObj-Num.sg@" "@R.DirObj-Num.pl@" "+DirObjPl":0 | 
    "@D.DirObj-Num.sg@" "@D.DirObj-Num.pl@" ] ;

define ResolveStyleFlagDiacritics [
    "@R.Style.old@" "+Old":0 | "@D.Style.old@" ]
  #[ "@R.Style.dangerous@" "+Dangerous":0 | "@D.Style.dangerous@" ]
  [ "@R.Style.bracket@" "+Bracket":0 | "@D.Style.bracket@" ]
  [ "@R.Dialect.+@" "+Dialect":0 | "@D.Dialect.+@" ]
  [ "@R.Subnorm.+@" "+NonStand":0 | "@D.Subnorm.+@" ]
  [ "@R.Style.subnorm@" "@D.Subnorm.+@" "+NonStand":0 | "@R.Subnorm.+@" | "@D.Style.subnorm@" ]
  [ "@R.Lang.og@" "+OG":0 | "@D.Lang.og@" ]
  [ "@R.Lang.ng@" "+NG":0 | "@D.Lang.ng@" ]
  [ "@R.Style.xanmeti@" "+Xanmeti":0 | "@D.Style.xanmeti@" ]
  [ "@R.Style.haemeti@" "+Haemeti":0 | "@D.Style.haemeti@" ]
 ;

# deprecated
define ResolveInfixFlagDiacritics [
    "@R.InfixLex.ვინმე@" "-ვინმე":0 | "@D.InfixLex.ვინმე@" ]
  [ "@R.InfixLex.რაჲმე@" "-რაჲმე":0 | "@D.InfixLex.რაჲმე@" ]
  [ "@R.InfixLex.მცა@" "-მცა":0 | "@D.InfixLex.მცა@" ]
  [ "@R.InfixLex.ხოლო@" "-ხოლო":0 | "@D.InfixLex.ხოლო@" ]
  [ "@R.InfixCat.cj@" "+Cj":0 | "@D.InfixCat.cj@" ]
  [ "@R.InfixCat.pron+indet+anim@" ["+Pron""+Indet""+Anim" "+Nom"]:0 | "@D.InfixCat.pron+indet+anim@" ]
  [ "@R.InfixCat.pron+indet+inanim@" ["+Pron""+Indet""+Inanim" "+Nom"]:0 | "@D.InfixCat.pron+indet+inanim@" ]
  ;

define ResolveParticipleFlagDiacritics "@R.Parsing.+@"
#  [ "@R.Cat.v@" "+V":0 | "@D.Cat.v@" ]
  [ "@R.Tense.masdar@" "+VN":0 | "@D.Tense.masdar@" ]
  [ "@R.Tense.future-part@" "+FutPart":0 | "@D.Tense.future-part@" ]
  [ "@R.Tense.past-part@" "+PastPart":0 | "@D.Tense.past-part@" ]
  [ "@R.Tense.present-part@" "+PresPart":0 | "@D.Tense.present-part@" ]
  [ "@R.Tense.negative-part@" "+NegPart":0 | "@D.Tense.negative-part@" ]  
  ResolveNounFlagDiacritics
 ;

# don't change this line:
# <--- automatically generated code will be inserted here --->

# set flag-is-epsilon ON

define EncliticAux {ყოფნ[ა]/არ}:{_ა} ["+V" "+MedPass" "+Base" "+Pres" "+<S-Pnom>" "+<NomSubj>" "+Subj3Sg" "+Encl"]:0 ;

define RFDParticiple Participle
       		     "+VPart":0
		     ResolveParticipleFlagDiacritics
		     ResolveFrameFlagDiacritics
		     "+CS":0
       		     [ "@R.EnclQopna.+@" "+Encl:Aux":0 | "@D.EnclQopna.+@" ] ; # has to come last

define Unda {უნდა} "+Modal":0 ; 

define Verb [ FiniteVerb
       	      #ResolveFrameFlagDiacritics
	      ResolveVerbClassFlagDiacritics
	      ResolveVerbTenseFlagDiacritics
	      ResolveFrameFlagDiacritics
	      "+CS":0 # "+CS" is a placeholder that will be replaced by Case syntax features
	      ResolveVerbPersFlagDiacritics
	      ResolveStyleFlagDiacritics
	      ( "@D.Tense.imperative-present@" "@D.Tense.imperative-aorist@"
	      	[ (0:"-") "+Encl:Q":{ა} | "+Encl:Q":{-მე} (0:ა) ] "+OG":0 ) # OG question clitic
	      # ResolveInfixFlagDiacritics
	    | EncliticAux
	    # | RFDParticiple
	     ]  ;

define CardinalDigits [ (["0"|1|2|3|4|5|6|7|8|9]+ ",") ["0"|1|2|3|4|5|6|7|8|9]+ ] "+Card":0 "+Digits":0;

define OrdinalDigits  [ 0:{მე·} [1|2|3|4|5|6|7|8|9] ["0"|1|2|3|4|5|6|7|8|9]* "+Ord":0 "+Digits":0
       		      | [1|2|3|4|5|6|7|8|9] ["0"|1|2|3|4|5|6|7|8|9]* "." "+Ord":0 "+Digits":0 ] ;


#define allMorph    [ [ Verb | Unda | RFDNoun ]
#       		      ( "@D.CaseType.reduced@"
#		       [ "+IndSpeech1":{-მეთქი}
#		       | "+IndSpeech2":{-თქო}
#		       | "+IndSpeech2":{-თქუა} "+OG":0
#		       | "+IndSpeech3":{ო}
#		       | ( 0:"-") "+Mca":{მცა} "+OG":0 ] )
#      		     | CardinalDigits
#		     | OrdinalDigits ] ;

define verbMorph    [ Verb | Unda ] ;

read regex verbMorph ;

# twosided flag-diacritics

# eliminate flags

echo > eliminate flag MorphType
eliminate flag MorphType
echo > eliminate flag Tense
eliminate flag Tense
echo > eliminate flag Cat
eliminate flag Cat

  echo > eliminate flag Lang
  eliminate flag Lang
  echo > eliminate flag Style
  eliminate flag Style
  echo > eliminate flag Dialect
  eliminate flag Dialect
  echo > eliminate flag Subnorm
  eliminate flag Subnorm

echo > eliminate flag VClass
eliminate flag VClass
echo > eliminate flag Alternation
eliminate flag Alternation
echo > eliminate flag Finite
eliminate flag Finite
echo > eliminate flag PartPfx
eliminate flag PartPfx
echo > eliminate flag PartSfx
eliminate flag PartSfx
echo > eliminate flag StExt
eliminate flag StExt
echo > eliminate flag IInfix
eliminate flag IInfix
echo > eliminate flag NasalInfix
eliminate flag NasalInfix
echo > eliminate flag PpfInfix
eliminate flag PpfInfix
echo > eliminate flag PpfVv
eliminate flag PpfVv
echo > eliminate flag Type-Optative3plEn
eliminate flag Type-Optative3plEn
echo > eliminate flag ScreeveSign
eliminate flag ScreeveSign
echo > eliminate flag Type-Aorist3sg
eliminate flag Type-Aorist3sg
echo > eliminate flag Type-Optative
eliminate flag Type-Optative
echo > eliminate flag Type-EvSfx
eliminate flag Type-EvSfx
echo > eliminate flag Type-Aorist
eliminate flag Type-Aorist
echo > eliminate flag PassiveSfx
eliminate flag PassiveSfx
echo > eliminate flag Type-RootVowel
eliminate flag Type-RootVowel
echo > eliminate flag CausSf
eliminate flag CausSf
# echo > eliminate flag CSf
# eliminate flag CSf
echo > eliminate flag Root
eliminate flag Root
echo > eliminate flag Sf
eliminate flag Sf
echo > eliminate flag Type-Subj3Sfx
eliminate flag Type-Subj3Sfx
echo > eliminate flag Type-Subj12Sfx
eliminate flag Type-Subj12Sfx
echo > eliminate flag PersSfx
eliminate flag PersSfx
echo > eliminate flag Inverted
eliminate flag Inverted
echo > eliminate flag PrStExt
eliminate flag PrStExt
#echo > eliminate flag Tense
#eliminate flag Tense
echo > eliminate flag Type-PrStExt
eliminate flag Type-PrStExt
echo > eliminate flag Subj-Num
eliminate flag Subj-Num
echo > eliminate flag Parsing
eliminate flag Parsing
echo > eliminate flag Type-Subj2Pfx
eliminate flag Type-Subj2Pfx
echo > eliminate flag Type-Root
eliminate flag Type-Root
echo > eliminate flag Type-Obj3Pfx
eliminate flag Type-Obj3Pfx
# echo > eliminate flag Obj3Pfx
# eliminate flag Obj3Pfx
echo > eliminate flag Relation
eliminate flag Relation
echo > eliminate flag Genus
eliminate flag Genus
echo > eliminate flag Obj-Pers
eliminate flag Obj-Pers
echo > eliminate flag Obj-Num
eliminate flag Obj-Num
echo > eliminate flag DirObj-Num
eliminate flag DirObj-Num
echo > eliminate flag DirPv
eliminate flag DirPv
echo > eliminate flag CRoot
eliminate flag CRoot
#echo > eliminate flag PfSfx
#eliminate flag PfSfx
echo > eliminate flag Pv
eliminate flag Pv
#echo > eliminate flag RedDirPv
#eliminate flag RedDirPv
echo > eliminate flag CPv
eliminate flag CPv
echo > eliminate flag Gv
eliminate flag Gv
echo > eliminate flag Aspect
eliminate flag Aspect
echo > eliminate flag Obj-Incl1pl
eliminate flag Obj-Incl1pl

echo > eliminate flag Vv
eliminate flag Vv

echo > eliminate flag Version
eliminate flag Version

echo > eliminate flag Subj-Pers
eliminate flag Subj-Pers

# echo > eliminate flag InfixCat
# eliminate flag InfixCat
# echo > eliminate flag InfixLex
# eliminate flag InfixLex

# echo > eliminate flag Reduplication
# eliminate flag Reduplication

echo > eliminate flag Redup
eliminate flag Redup

# echo > eliminate flag Pp
# eliminate flag Pp

#echo > eliminate flag Frame
#eliminate flag Frame

#echo optimize
#optimize

# echo compact net
# compact net

echo save

# EOF
